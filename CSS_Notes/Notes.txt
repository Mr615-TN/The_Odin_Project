CSS is made up of various rules at the most basic level

<div> is an empty container

Selectors are HTML elements to which CSS rules apply (they are being selected for each rule)

Universial selectors will select elements of any type
    example -> { color:purple; }

A type selector will select all elements of the given element type (the syntax is just name of the element)
    example -> <div>Hello World!</div>


Class selectors will select all elements with the given class, which is just an attribute you place on an HTML element
    example -> <div class="alert-text">Please agree to our terms of service.</div>
                .alert-text {
                    color: red;
                }
ID selectors are similar to class selectors. They select an element with the given ID, which is another attribute you place on an HTML element. The major difference between classes and IDs is that an element can only have one ID.
    example -> <div id="title">My Awesome 90's Page</div>
                #title {
                background-color: red;
                }

Grouping selector:
    example -> .read {
                    color: white;
                    background-color: black;
                    /* several unique declarations */
                }

                .unread {
                    color: white;
                    background-color: black;
                    /* several unique declarations */
                }

    example ->  .read,
                .unread {
                    color: white;
                    background-color: black;
                }

                .read {
                    /* several unique declarations */
                }

                .unread {
                    /* several unique declarations */
                }
Chaining Selectors. Another way to use selectors is to chain them as a list without any separation.
    example ->  <div>
                    <div class="subsection header">Latest Posts</div>
                    <p class="subsection preview">This is where a preview for a post might go.</p>
                </div>
                .subsection.header {
                    color: red;
                }

    example ->  <div>
                    <div class="subsection header">Latest Posts</div>
                    <p class="subsection" id="preview">
                    This is where a preview for a post might go.
                    </p>
                </div>

                .subsection.header {
                    color: red;
                }

                .subsection#preview {
                    color: blue;
                }

There are four types of combinators in total, but for right now we’re going to only show you the descendant combinator, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc.) that matches the previous selector.

    example:
        <div class="ancestor">
        <!-- A -->
        <div class="contents">
            <!-- B -->
            <div class="contents"><!-- C --></div>
        </div>
        </div>

        <div class="contents"><!-- D --></div>

        /* styles.css */

        .ancestor .contents {
        /* some declarations */
        }

Color (can take keywords or the stuff below):
    p {
    /* hex example: */
    color: #1100ff;
    }

    p {
    /* rgb example: */
    color: rgb(100, 0, 127);
    }

    p {
    /* hsl example: */
    color: hsl(15, 82%, 56%);
    }
Typography basics and text-align
    font-family can be a single value or a comma-separated list of values that determine what font an element uses. 
    Each font will fall into one of two categories, either a “font family name” like "Times New Roman" (we use quotes due to the whitespace between words) or a “generic family name” like serif (generic family names never use quotes).

    If a browser cannot find or does not support the first font in a list, it will use the next one, then the next one and so on until it finds a supported and valid font. 
    This is why it’s best practice to include a list of values for this property, starting with the font you want to be used most and ending with a generic font family as a fallback, e.g. font-family: "Times New Roman", serif;

    font-size will, as the property name suggests, set the size of the font. When giving a value to this property, the value should not contain any whitespace, e.g. font-size: 22px has no space between “22” and “px”.

    font-weight affects the boldness of text, assuming the font supports the specified weight. 
    This value can be a keyword, e.g. font-weight: bold, or a number between 1 and 1000, e.g. font-weight: 700 (the equivalent of bold.
    Usually, the numeric values will be in increments of 100 up to 900, though this will depend on the font.

    text-align will align text horizontally within an element, and you can use the common keywords you may have come across in word processors as the value for this property, e.g. text-align: center.

By default, an <img> element’s height and width values will be the same as the actual image file’s height and width. 
If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of “auto” for the height property and adjust the width value:
    example where og height is 500px and og width is 1000px which means that now the new height 250px:
        img {
        height: auto;
        width: 500px;
        }
External CSS
External CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing <head> tags with a void <link> element:

<!-- index.html -->

<head>
  <link rel="stylesheet" href="styles.css">
</head>
/* styles.css */

div {
  color: white;
  background-color: black;
}

p {
  color: red;
}
